--- Installation
Gemfile:
gem 'hotwire-rails'

bundle install
rails hotwire:install

app/javascript/packs/application.js:
import "@hotwired/turbo-rails"

--- Dynamic creation
app/models/tweet.rb:
after_create_commit { broadcast_prepend_to "tweets" }
# "tweets" needs to refer to a frame on the page with the same name

app/views/tweets/index.html.erb - wrap tweets in:
<%= turbo_frame_tag 'tweets' do %>

also add - tells ActionCable channel to listen to that stream:
<%= turbo_stream_from "tweets" %>

--- Dynamic update/destroy
app/models/tweet.rb - this doesn't work because we need to wrap each tweet in a frame:
after_update_commit { broadcast_replace_to "tweets" }
after_destroy_commit { broadcast_remove_to "tweets" }

app/views/tweets/_tweet.html.erb - wrap tweet:
<%= turbo_frame_tag dom_id(tweet) do %>

--- Turbo with the form
app/views/tweets/index.html.erb - wrap form in:
<%= turbo_frame_tag "tweet_form" do %>

- Now the form submits, controller processes it as a TURBO STREAM. Turbo is taking the form and submitting it for you.
  Create works, but when a validation fails it doesn't.

app/models/tweet.rb:
validates :body, presence: true

app/controllers/tweets_controller.rb#create:
format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: "tweets/form", locals: {tweet: @tweet})}

app/views/tweets/_form.html.erb - add to form:
, id: dom_id(tweet)

- Now it works and we can check the network tab on devtools to see what it sent
